#include "DlgSettings.h"
#include <QFontDialog>
#include <QApplication>
#include <QResource>

DlgSettings::DlgSettings(QWidget *parent) :
	QDialog(parent)
{
	ui.setupUi(this);
	setting = Setting::getInstance();
	font = setting->getFont();

	connect(ui.btFont, SIGNAL(clicked()), this, SLOT(onFont()));
}

void DlgSettings::accept()
{
	setting->setFont(font);
	ui.tabValidFields      ->save();
	ui.tabAbbreviationRules->save();
    ui.tabKeyGen           ->save();

	QDialog::accept();
}

void DlgSettings::onFont()
{
	bool ok;
	QFont f = QFontDialog::getFont(&ok, font, this);
	if(ok)
		font = f;
}


//////////////////////////////////////////////////////////////////////////
// Setting
Setting::Setting(const QString& fileName)
: MySetting<Setting>(fileName)
{
	if(QFile(this->fileName).size() == 0)   // no setting
		loadDefaults();
}

void Setting::loadDefaults()
{
	setFont(qApp->font());
    setKeyGenRule("lastname;firstletter;year]");
}

QFont Setting::getFont() const
{
	QFont font;
	font.fromString(value("Font").toString());
	return font;
}

void Setting::setFont(const QFont& font) {
	setValue("Font", font);
}

QStringList Setting::getFields() const
{
	// empty string.split() will produce a stringlist with one empty entry
	QString content = value("Fields").toString();
	return content.isEmpty() ? QStringList() : content.split(";");
}

void Setting::setFields(const QStringList& fields) {
	setValue("Fields", fields.join(";").toLower());
}

QStringList Setting::getAbbreviationRules() const
{
	// empty string.split() will produce a stringlist with one empty entry
	QString content = value("AbbreviationRules").toString();
	return content.isEmpty() ? QStringList() : content.split("#");
}

QStringList Setting::getSelectedAbbreviationRules() const
{
	QStringList allRules = getAbbreviationRules();
    QStringList result;
	foreach(const QString& rule, allRules)
	{
		QStringList sections = rule.split(";");
		if(sections.size() == 3 && sections[2].toLower() == "true")
            result << sections[0] + ";" + sections[1];
	}
    return result;
}

void Setting::setAbbreviationRules(const QStringList& rules) {
	setValue("AbbreviationRules", rules.join("#"));
}

QString Setting::getCompileDate() const
{
	// this resource file is generated by running CompileDate.bat (CompileData on Mac)
	QResource resource(":/CompileDate.txt");
	QString result = (char*)resource.data();
    return result.isEmpty() ? "Unknown" : result;
}

QString Setting::getKeyGenRule() const {
    return value("KeyGenRule").toString();
}

void Setting::setKeyGenRule(const QString& rule) {
    setValue("KeyGenRule", rule);
}
